<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>通道名稱:</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>紙票印表機串口:</value>
  </data>
  <data name="label29.Text" xml:space="preserve">
    <value>讀卡間隔(s)</value>
  </data>
  <data name="chkLightOnWhenCarArrive.Text" xml:space="preserve">
    <value>壓地感開補光燈</value>
  </data>
  <data name="chkReadCardNeedCarSense.Text" xml:space="preserve">
    <value>讀卡要求壓地感</value>
  </data>
  <data name="chkOnlyTempReaderAfterButtonClick.Text" xml:space="preserve">
    <value>按取卡按鈕後只能在臨時卡讀頭上讀卡</value>
  </data>
  <data name="chkPrepayCardWaitWhenOut.Text" xml:space="preserve">
    <value>儲值卡出場需確認</value>
  </data>
  <data name="chkMonthCardWaitWhenOut.Text" xml:space="preserve">
    <value>月卡出場需確認</value>
  </data>
  <data name="chkCardValidNeedResponse.Text" xml:space="preserve">
    <value>事件有效指令需等待下位機確認</value>
  </data>
  <data name="chkNoReaderOnCardCaptuer.Text" xml:space="preserve">
    <value>出口收卡機內沒有安裝讀卡機</value>
  </data>
  <data name="chkEnableParkvacantLed.Text" xml:space="preserve">
    <value>啟用車場余位屏</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="chkNoParkingCount.Size" type="System.Drawing.Size, System.Drawing">
    <value>120, 16</value>
  </data>
  <data name="chkNoParkingCount.Text" xml:space="preserve">
    <value>不進行車位元數目</value>
  </data>
  <data name="chkUseAsACS.Text" xml:space="preserve">
    <value>路閘模式</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>視頻:</value>
  </data>
  <data name="groupBox2.Text" xml:space="preserve">
    <value>車牌識別一體機</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>條碼槍串口號:</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>條碼槍串口號2:</value>
  </data>
  <data name="chkForbidWhenFull.Text" xml:space="preserve">
    <value>車場滿位時禁止進場</value>
  </data>
  <data name="chkForbidWhenCardExpired.Text" xml:space="preserve">
    <value>禁止過期卡片進出場</value>
  </data>
  <data name="chkPrinterUseNotch.Text" xml:space="preserve">
    <value>紙票印表機使用黑標打印</value>
  </data>
</root>